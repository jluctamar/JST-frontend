{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { clearNotification, hideNotification, showNotification, updateErrorMsg, updateRespMsg } from '../actions/notification.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport let NotificationsEffects = /*#__PURE__*/(() => {\n  class NotificationsEffects {\n    constructor(actions$, authService, router, store) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.router = router;\n      this.store = store;\n      this.updateErrorMsg$ = createEffect(() => {\n        return this.actions$.pipe(ofType(updateErrorMsg), switchMap(() => {\n          return of(showNotification());\n        }));\n      });\n      this.updateRespMsg$ = createEffect(() => {\n        return this.actions$.pipe(ofType(updateRespMsg), switchMap(() => {\n          return of(showNotification());\n        }));\n      });\n      this.hideNotification$ = createEffect(() => {\n        return this.actions$.pipe(ofType(hideNotification), switchMap(() => {\n          return of(clearNotification());\n        }));\n      });\n    }\n  }\n  NotificationsEffects.ɵfac = function NotificationsEffects_Factory(t) {\n    return new (t || NotificationsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  NotificationsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsEffects,\n    factory: NotificationsEffects.ɵfac\n  });\n  return NotificationsEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}