{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { logout } from '../actions/authenticator.actions';\nimport { updateErrorMsg, updateRespMsg } from '../actions/notification.actions';\nimport { deleteUser, updateUser, updateUserStateProperty } from '../actions/user-management.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/user-management.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport let UserManagementEffects = /*#__PURE__*/(() => {\n  class UserManagementEffects {\n    constructor(actions$, userManagementService, router, store) {\n      this.actions$ = actions$;\n      this.userManagementService = userManagementService;\n      this.router = router;\n      this.store = store;\n      this.updateUser$ = createEffect(() => {\n        return this.actions$.pipe(ofType(updateUser), switchMap(action => this.userManagementService.updateUser(action.user).pipe(map(resp => {\n          return updateUserStateProperty({\n            user: resp\n          });\n        }), catchError(resp => {\n          return of(updateErrorMsg({\n            errorMsg: \"User Was Not Updated\"\n          }));\n        }))));\n      });\n      this.deleteUser$ = createEffect(() => {\n        return this.actions$.pipe(ofType(deleteUser), switchMap(action => this.userManagementService.deleteUser(action.user).pipe(map(resp => {\n          this.store.dispatch(logout());\n          return updateRespMsg({\n            respMsg: resp['message']\n          });\n        }), catchError(resp => {\n          return of(updateErrorMsg({\n            errorMsg: \"User Failed To Delete\"\n          }));\n        }))));\n      });\n      this.updateUserStateProperty$ = createEffect(() => {\n        return this.actions$.pipe(ofType(updateUserStateProperty), switchMap(() => {\n          return of(updateRespMsg({\n            respMsg: \"Successfully Updated User\"\n          }));\n        }));\n      });\n    }\n  }\n  UserManagementEffects.ɵfac = function UserManagementEffects_Factory(t) {\n    return new (t || UserManagementEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserManagementService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  UserManagementEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserManagementEffects,\n    factory: UserManagementEffects.ɵfac\n  });\n  return UserManagementEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}